
services:
  backend:
    build:
      ./backend/
    container_name: backend-container
    #depends_on:
    #  db
    #    condition: service_healthy
    ports:
      - ${HTTP_PORT}:8000
    restart: always
    volumes:
      - ./backend:/app/backend
    networks:
      - app-network
    environment:
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    #    POSTGRES_USER: ${DATABASE_USER}
    #    POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    #    POSTGRES_DB: ${DATABASE_NAME}
    #    POSTGRES_HOST: db
    #    POSTGRES_PORT: 5432
  
  frontend:
    build: 
      ./frontend/
    container_name: frontend-container
    #depends_on:
    #  - backend
    ports:
      - 5173:5173
    restart: always
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    networks:
      - app-network
    

  #db:
  #  image: postgres:latest
  #  container_name: db-container
  #  healthcheck:
  #    test: ["CMD", "pg_isready -q -d ${DATABASE_NAME} -U ${DATABASE_USER}"]
  #    interval: 15s
  #    timeout: 20s
  #    retries: 10
  #  restart: always
  #  volumes:
  #    - ./database:/var/lib/postgresql/data
  #  ports:
  #    - ${POSTGRES_PORT}:5432
  #  environment:
  #    POSTGRES_USER: ${DATABASE_USER}
  #    POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
  #    POSTGRES_DB: ${DATABASE_NAME}
  #    POSTGRES_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
  
networks:
    app-network:
      name: app-network
    